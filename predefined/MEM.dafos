*MEM (
    *Block (
        *Ref ()  ' A Block.Ref instance is not allowed to leave the Domain.
        *Fetch {
            ?r : Ref
            !b : Block
        }
        *Release {
            ?r : Ref
        }
        *Size {  ' Size in bytes.
            !s : UINT
        }
    )
    '(
    *ByteBlock : Block (
        *bytes : _#BYTE  ' Automatically gives the array the length to fill up the Block.
    )
    )'

    ' Type for objects that share their structure with Domain.
    *DObj {
        .active {}
    }
    *Revision ()
    *Domain : DObj {
        *revision : Revision
        .storedData : StoredData (  ' Type for this is automatically generated.
            *revision : Revision
        )

        .update [
            ' version update
            .storedData 
        ]
    }

    --- Not built in. Implemented in library.
    *EventStore : Domain {
    }
    ---

    *Directory : Domain {
        ?TKey
        ?TInfo
        *active {
            *register [
                ?key : TKey
                ?info : TInfo
                ?d : DomainHandle
            ]

        }
    }

    ' Garbage collect all objects of the domain. This may not be done during real-time processing.
    *Collect {}

    ' Write buffered blocks to disk. This may not be done during real-time processing.
    *Sync {}
)
