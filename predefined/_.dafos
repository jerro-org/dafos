' The base type for all data. May contain functions for the type itself as well, hence its a 'MOD'.
*DATA : (

    ' Union of potential errors for this type. Errors can be defined in extensions of DATA.
    *Error : ()

    *Eq= {
    }
    *Neq<> {
    }
    *String {
    }
    *Size {} ' in bits
    *Length {} ' in bytes
)

' Can be a function or a stateful object.
*OBJ : {
}

' Functions/objects can register errors for its outputs. Errors are passed along the syntax tree as long as unchecked.
' If a function may set an error on an output this is indicated in the interface/prototype of the function.
' Functions that do not check potentially errored outputs will have potentially errored outputs themselves indicated in their interface again.
' On an error, function outputs are set to the base value of its type.
*ERROR : {
    ?d : DATA
    !r : DATA.Error
    !d : DATA
}

' Check data for errors that have been collected along the syntax tree.
' This resolves the error so it does not appear anymore in the using fuction.
*CHECK : {
    ?d : DATA
    !e : #DATA.Error
}

' Convertable to all other data with same size except PTR, TYPE, ...
*BITS : DATA (
    ?n : UINT
    *Shift<<
    *Rotate<<<
    *And&
    *Or&
    *Not~
    *Xor^
)
*BYTE : BITS:8
*WORD16 : BITS:16
*WORD32 : BITS:32
*WORD64 : BITS:64
' ...

' Pointer data type with restricted usage.
*PTR^ : (
    ?T
    *Error : (
        ' Construction can fail. If so the default value of the pointer is 'no operatration'.
        ' This means expressions with the kept reference as input will not be executed.
        ' Dereferencing will result in default of the value.
        |CouldNotAllocate
    )
    *Ref^_ : {  ' '^' before identifier: Keep/take reference. Operator cannot be overwritten.
        ?d : T
        !p : PTR:T
    }
    *Deref_^ : {  ' '^' after identifier: Dereference (a mutator, left side of ':'), operator cannot be overwritten.
        ?p : PTR:T
        !d : T
    }
)

' Treat type as data, e.g. for storing in generic type like any other data and get back the Type afterwards.
' There is no instance of the type involved in this.
' It is actually just a conversion between lower case and upper case identifier.
' If T is OBJ
*TYPE& : (
    ?T
    *Datify&_ : {
        ?T
        !t : TYPE
    }
    *Typify_& : {
        ?t : TYPE
        !T
    }
)
'( example usage of datify/typify
    .F : {
        ?a : NUM
        ?b : NUM
        !c : NUM
    }
    List of functions of prototype:
    list : List:&F
    list : List.Prepend : &NUM.Add list
    list : List.Prepend : &NUM.Sub list
    firstFunction : List.First:list
    FirstFunction : firstFunction&
    FirstFunction : List.First:list&
    z : FirstFunction : x y
)'

' FIXME Do we actually need it for data?)
' To get a handle of any (data or) object:
'   o : .obj
' This is also possible, before the object is defined to access properties of the object that are known, before.
' Eg. type of object and (RT-)connection properties (sample rate, etc.).
*HANDLE. : DATA (
    ?T
    *Type {
        ?h
        !T
    }
)

*EOBJ : OBJ {
}

*CHECK : {
    ?data
    !result
}

' Array definition:
'   matrix : ARRAY : NUM (3 3)
' with shortcut
'   matrix : 3#3#NUM
*ARRAY# : (
    ?T
    ?size : d#UINT

    *Error : (
        |GetOutOfRange
        |SetOutOfRange
    )

    *Get@ : EOBJ {
        ?array
        ?at
        [ value : ERROR : value Error.GetOutOfRange ]
        !value : T  ' On error value is T's base value.
    }
    ' The set operator is a shortcut to make
    '   array : SET : array index element
    ' look like an inplace operation
    '   array@index : element
    ' with re-assignment of signal name "array"
    *Set@: : EOBJ {  ' array@index : x
        ?array
        ?index : d#UINT
        ?element : T
        [ array : ERROR : value Error.SetOutOfRange ]
        !array
    }
    *Concat, : {
        ?a
        ?b
        ?c
    }
    *Resize : {
        ?in : ARRAY:x
    }
)

*STRING : (
    *Concat, : {
        ?a
        ?b
        !c
    }
    *Len : {
        ?s
    }
)

'( Example:
*Matrix3D : ARRAY : 3 (ARRAY 3 FLOAT32)
' With special syntax:
*Matrix3D : 3#3#FLOAT32
' Access:
m : Matrix3D : (1 0 0) (0 1 0) (0 0 1)
m@1@1 : 2  ' m becomes a new matrix
m.T

*OpenArrayFunction : {
    ?arr : ##FLOAT32
    { e : arr@i  ' Iterate all
        { f : arr@j

        }
    }
    ?oldArr : m#n#FLOAT32
    newArr : m#n#FLOAT32
    { e f : arr@i@j oldArr@i@j
        f : e + 1
    }
    { e : oldArr@i@j
    & f : newArr@i@j
        f : e + 1
    }
    { e : oldArr@i@j; f : newArr@i@j
        f : e + 1
    }
}
)'

*BOOL : (
    |True
    |False

    *And& : {}
    *Or| : {}
    *Not~ :{}
    *Xor^ : {} ' Same as NEQ<> but less binding.
)

' NUM is a generic number.
' It is designed to allow to keep the precision and length after the four basic operations +, -, *, and /.
*NUM : (
    *Sgn : (
        |Positive
        |Negative
    )

    ' We define fields here that make it possible to implement arbitrary length/precision numbers.
    .numerator : INT (  ' Dot ('.') definitions can only be accessed from functions within NUM or types derived from NUM.
        *size : UINT ' stored size
        *sign : Sign
    )
    .exponent : INT (
        *sign : Sign ' stored size
        *size : UINT
    )
    .denominator : UINT (  ' Base value is 1 for this.
        *size : UINT ' stored size
    )

    ' The result of the operators will have the data type of the module from which it is used.
    ' If not given explicitly: The output type is set from the connected input.
    ' If not given and inputs are the same type, output type is input type
    ' If not specified this will be the fixed size of the input with the bigger range.
    ' If taken form NUM module, output size is dynamically determined.
    ' Wrapping for integers, saturating for floats (+-infinity).
    *Add+ : {
        ?a
        ?b
        !c
    }
    *Sub- : {
    }
    *Mul* : {
    }
    *Div/ : EOBJ {
    }
    *Rem\ : EOBJ {
    }

    ' For NUMs with exponent: no shift, exponent is incremented. 
    ' out = in * 2^n
    *Shift<< : {
    }

    ' Check if the actual data in the input number would fit into this type.
    *CheckRange : {
        ?in
        !fits : BOOL
    }
    *CheckPrecision : {
        ?in : NUM
        !fits : BOOL
    }
    ' Can be used from a derived data like 'someInt32Number : INT32.SatRound : arbitraryNumber'
    *SatRound : {
        ?in
        !out
    }
    *SatTrunc : {
    }
    *WrapRound : {
    }
    *WrapTrunc : {
    }
    *Numerator : {
    }
    *Denominator : {
    }
    *Exponent : {
    }
    *Size : {
    }
    *StoredSize : {
    }
    *Sign : {
        ?in
        !out : Sgn
    }
    *Absolute : {
    }
)
*INT : NUM (
    .denominator : 1
    .exponent : 0
)
*INT8
*INT16
*INT32 : INT (
    .numerator.size : 32
)
*INT64
*UINT
*UINT8
*UINT16
*UINT32
*UINT64
*UINT128
*FLOAT : NUM (
    .denominator : 1
)
*FLOAT16 : FLOAT (
    .numerator.size : 11
    .exponent.size : 5
)
*FLOAT32 : FLOAT (
    .numerator.size : 24
    .exponetn.size: 8
)
*FLOAT64 : FLOAT (
    .numerator.size: 53
    .exponent.size: 11
)
*FLOAT128
*FIX
*FIX8
*FIX16
*FIX32
*FIX64
*UFIX
*UFIX8
*UFIX16
*UFIX64
*RATIONAL : NUM (
    .exponent : 0
)
*RATIONAL16 : RATIONAL (
    .numerator.size : 8
    denominator.size : 8
)
*RATIONAL32
*RATIONAL64
*RATIONAL128

'( Define more concrete types:
*Fix32q24 : Fix32 (.exponent : -24)
*Rational64 : RATIONAL (.numerator(.size : 32); .denominator(.size : 32))
)'

'( More functions for NUM could be defined in a derived type.
*NumExt : NUM (
    *Reduce {
        ' numerator/denominator/... can be accessed from here.
    }
) 
)'

*SET : (
    (
        ?Accessor  ' Must have finite (small) number of possible values (Enumeration)
    |
        ?n : UINT
    )

    *And& {

    }
    *Or| {

    }
    *Xor^ {

    }

    '( Can be defined in SetExt if needed, using BITS operations.
    *Shift<< {
        ?in
        ?n
        !out
    }
    *Rotate<<< {
    }        
    )'

)
*SET8
*SET16
*SET32
*SET64

*INT : NUM (
    .denominator : 1
    .exponent : 0
)

*INT32 : INT (
    .numerator (
        .size : 32
    )
)

' DATA type that may do dynamic memory management using pointers.
' But pointers are always private to the DYNAMIC.
*DYNAMIC : (
)

