' We do not like single case discriminated unions as they either do not force check or are unhandy.
' If forced check is required, wrap type
*Email ( 
    .str : STRING
    ' Define some functions to work with it: ...
)
' Or just alias:
*Email : STRING

' Discriminated union:
*Rate (
    |Variable
    |Constant : Rational64
)

* Mixer {
    ?n ?m
    smpRate : RateOf : .smp
    *par {
        *smp {
            RateHere
        }
    }
}

* Bst (
    |Empty_  ' Underscore is an shortcut definition 'for the neutral case' (like operators for functions).
    |Node (
        *value : Num
        *left : Bst
        *right : Bst
    )
)

'(
    7
 3     9
2 5   8 10
   6
)'
{
    ' Full
    bst : Bst.Node : 7 (
        Bst.Node : 3 (
            Bst.Node : 2 Bst.Empty Bst.Empty
        ) (
            Bst.Node : 5 Bst.Empty (
                Bst.Node : 6 Bst.Empty Bst.Empty
            )
        )
    ) (
        Bst.Node : 9 (
            Bst.Node : 8 Bst.Empty Bst.Empty
        ) (
            Bst.Node : 10 Bst.Empty Bst.Empty
        )
    )
    ' Right side of "Bst :" inherits the Bst namespace and "Empty" is replaced by "_".
    bst : Bst : 7 (
        3 (
            2 _ _
        ) (
            5 _ (
                6 _ _
            )
        )
    ) (
        9 (
            8 _ _
        ) (
            10 _ _
        )
    )
    ' Written on one line.
    bst : Bst : 7 (3 (2 _ _) (5 _ (6 _ _))) (9 (8 _ _) (10 _ _))
    ' Flattened. Still unambiguous.
    bst : Bst : 7 3 2 _ _ 5 _ 6 _ _ 9 8 _ _ 10 _ _
}

? in : Bst
[
    : Match : in Empty
    ...
|
    : Match : in Node
    ... in.value
|
    ...
]

* ShapeId
* CircleId : ShapeId
* RectangleId : ShapeId
* PolygonId : ShapeId

* ShapeId (
    | CircleId
    | RectangleId
)

* Email { address : STRING}
* EmailAddress : STRING
email : Email : "jerro@jerro.ch"
emails : #Email : "dan@jerro.ch" email

* ToEmailAddress {
    ?s : String
    [ Regex.Match : s "^\S+@\S+\.\S+$"
        ! email : Error : "No Match"
    |
        ! email : Email : s
    ]
}

emailOk : ToMailAddress : "jerro@jerro.ch"
emailNone : ToEmailAddress : "Jerro"

* ToEmailAddress {
    ? s : String
    error [
        : Regex.Match : s "^\S+@\S+\.\S+$"
        !error : "No Match"
    email |
        !email : Email : s
    ]
}

{
    .e : ToEmailAddress : "jerro@jerro.ch"
    [
        print e.error
    |
        print e.email
    ]
}

error email : ToMailAddress : "jerro@jerro.ch"
[
    ... error ...
|
    ... email ...
]

*Square {
    ?x
    !y : x*x
}

* Sum {
    ? x : _*Num
    ! Fold : x 0 Add
}

* SomeObj {
    Func : (Sum : Square)
}

* AddingCalculator {
    ? in
    ! in+1
}

* LoggingCalculator {
    ? in Func
    log : "input: ",in
    out : Func : in
    log : "output: ",out
    ! out
}

* Add42 : (NumAdd : 42)

* Add42 : NumAdd {
    b : 42
}

a : 1 2 4 50 5423 3403 24 0
-- i : 0
{
    b@i : (a@i + a@(i+1)) / 2
    -- i : i + 1
}

a : 1 2 4 50 5423 3403 24 0
n : ARRAY.Len : a
b : (a@0..(n-2) + a@1..(n-1)) / 2

* InsertAfter {
    ?T
    ?c : List:T
    ?e : T
    { c : Node & e < c.val
        co : List:T: cr.val : cr.next
    }
    i.next : e i.next
    ! c : Cycle:T
}

* Option (
    ?T
    |none
    |Some (
        *_val T
    )
)

' Producing a cycle:
.cycle : List:NUM : 1 2 3 cycle

'(
list : List:NUM : 1 2 3
end : ^list
{ end : Node
    end : ^end.next
}
end : ^list
)'


cycle : cycle:Int32 : (1 (2 (3 cycle)))

*ListMapExample {
    list : List:Num : 0 1 2 3 4 5
    newList : List.Map : list {
        !newElement : ?element + 1
    }
}

* BTree (
    ?T
    | Empty
    | Node (
        * val : T
        * left : BTree:T
        * right : BTree:T
    )
)

*ArrayIteration {
    ?arr : n#m#FLOAT32
    { i : 0..n  ' Iterate range
        { j : 0..m  ' Possible constructs here: BOOL expression, type match definition/assignment, ARRAY for iteration

        }
    }
}

l : (List:Int32) : 1 2 3 4

l2 : 0 l

l3 : l 5

{ l : Node
& l.val <
    o : 


}

-- Cyclic List
list : (SList:Int32).Start : (1 (2 (3 list)))
list : Start : 1 2 3 list

* Graph (
    * List ()
    | Empty
    | Node (
        * val : String
        * others : List
    )
)

* Ref (
    ? T
)

* Timeline

*File (
    ?Element : Obj
    {
        *Reader.setPos (  ' Reader is a type, hence starts with capital letter. If there is a reader it must be set. So this is not optional --> ().
            ?pos : Position : 0  ' pos can only be accessed within Reader parts as it is an input to a specific instance of Reader.
        )
        {
            *Reader.read [
                !out : Element
            ]
            *write [
                ?in : Element
            ]
            *clear [
            ] 
        }
    }
)

'(
*Reader {
    *setPos ()
    {
        *read []
    }
}
)'

'  Free file reader use:
*FileRenderer {
    .file : File:Audio.Sample
    file.write : sin : 0.0 .. 2*Math.pi .. 0.02*Math.pi
    .firstReader : file.Reader  ' '.' says that this is not a signal assignment but an oject instance definition.
    firstReader.setPos 10
    .secondReader : file.Reader
    secondReader.setPos 20
}

-- File reader signature:
*File.Reader {
    *setPos [
        ?pos : Position
    ]
    *read {
        !out : Element

    }
}

-- generic module
*Sp (
    ?Sample
)

*Audio (
    *Sample : Float32
    *Sp : Sp:Sample  -- specific Sp module
    -- ...
)

*AudioFile : File:Audio.Sample


*ExampleDomain {
    ' version update
    oldVersion : version
    *version : $000a0101
    .update [ oldVersion < version
        counter : storedData.counter - 1  -- E.g. if old version starts counting at 1 and new version at 0.
    ]

    *active {
        ' active
    }
}

*FunctionPrototype {
    ?x : T
    !y : U
}

*MyUi : Ui.Domain {
    @Ui.Vidgets  ' import view gadgets (=vidgets)
    .mainVidget : ResizeKdt  ' from Ui.Vidgets
    *active {
        *control {
            ?viewSize : 2#UINT
            mainVidget.Resize : viewSize
            ?viewPointer : ViewPointer
            vidgets.Sift : viewPointer
            *audio {

            }
            !viewOut : Picture:viewSize
            ' FIXME Popups are handled by framework
            [ weHaveAPopupToShow
                !popUpOut : Picture
            ]
        }
    }
}