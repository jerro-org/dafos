*SYS (
    *Block (
        *Ref ()  ' A Block.Ref instance is not allowed to leave the Domain.
        *Fetch {
            ?r : Ref
            !b : Block
        }
        *Release {
            ?r : Ref
        }
        *Size {  ' Size in bytes.
            !s : UINT
        }
    )
    '(
    *ByteBlock : Block (
        *bytes : BYTE#_  ' Automatically gives the array the length to fill up the Block.
    )
    )'
    *Domain {
        *revision : Revision
        .Update [
            ' version update
            .storedData 
        ]
        .Active {}
    }

    --- Not built in. Implemented in library.
    *EventStore : Domain {
    }
    ---

    *Directory : Domain {
        Register
    }

    *Module : Domain {  ' A module is identified by a UUID
        *Group (
            |Mandatory
            |Optional
            |Repeated
            ' ...
        )
        *Definition (...)
        *active : Active {
            *insertDefinition [...]
            ...
            *insertGroup [
                ?new : Group
                ?after : Handle
                !handle : Handle
            ]
            ... defines, connects, ...
            *compile {
                ?compileOptions
                !T : Module
            }
            ! update  ' Multiple views to the module can connect to updates        
        }
    )
    *Meta : Domain (
        *Access (|FULL |READ |INTERFACE |NONE)
        ?path : STRING
        ' mod : Module
        *Meta
        *active : Active {
            *insertGroup [
                ?new : Group
                ?after : Handle
                !handle : Handle
            ]
            ... defines, connects, ...
            *compile {
                ?compileOptions
                !m : Module
            }
            !update  ' Multiple views to the module can connect to updates        
        }
    )

    *Registry (
        *LayerKind (
            |Global
            |Local
            |Dev
        )
        *Add {
            ?dir : Ref:Directory
            ?priority : Priority
            !reg : ...
        }        
    )

    ' Global logger.
    *Log {

    }

    ' Garbage collect all objects of the domain. This may not be done during real-time processing.
    *Collect {}

    ' Write buffered blocks to disk. This may not be done during real-time processing.
    *Sync {}
)
