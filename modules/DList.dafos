' Doubly linked list.
' This has heavily mutable character. Therefore the compiler needs to copy input if the original is still needed after.
*DList : DYNAMIC (
    ?T
    .Node (
        &next : Node
        &prev : Node
        *v : Option:T  ' This is None only for s (the sentinel).
    )
    s : Node : s s


    *PushBack {
        ?
        ?e : T
        &new : Node s s.prev e
        s.prev.next^ : new&  ' Reference mutation
        s.prev^ : new&
        !
    }
    *PopBack {
        ?
        !e : s.prev.v  ' This might be 'None' if the list is empty which means 's.prev& = s&'
        [ e : Some
            s.prev^ : s.prev.prev
            s.prev.next^ : s
        ]
        !
    }

'(
    CHK.Assert : s.v.IsNone
    c : s.next
    { c.v : Option.Some
        CHK.Assert : s.next.prev& = s&
        c : c.next
    }
    CHK.Assert : c = s
)'
)

