' List is a 'DYNAMIC' data type. This means that it can contain DATA by reference, but none of this can be seen outside the List Module (and extensions of it).
*List : DYNAMIC (
    ?T
    ' Usually T is DATA then instance is used for v.
    ' If T is OBJ then we mean its type not its instance, which is the same for pure functions.
    ' List-internally it is treated as DATA instance (identifier starts with small letter) even if T is a function.
    
    ' Private implementation:
    .Node : (
        |None  ' First choice used as default initialization.
        |Some : (
            *v : T
            *next : ^Node  ' A pointer that cannot be seen outside the list module. 'next' is used as any (non-pointer) field (copied by default).
        )        
    )
    .first : ^Node

    ' All funtions that potentially allocate new nodes may set an error on their output: Allocate may fail.

    ' non-mutating functions
    
    *RevMap {
        ?in
        ?F : {
            ?i : ?T
            !o : ?U
        }
        out : List:U  ' Define 'out' as a list.
        cur : in.first ' The first element defaults to 'None' (implemented as null pointer). Keep it as the beginning of the list.
        { cur : Node.Some  ' As long as node is 'Some' (not 'None')...
            out.first : ^Node.Some : F:cur.v out.first
            cur : cur.next
        }
        '( Interface will show because out is not checked here:
        [
            out : ERROR : Ptr.Error.CouldNotAllocate
        ]
        )'
        !out
    }

    *Prepend {  ' Note that Prepend does not mutate the input list, so the compiler should see, there is no need to copy it.
        ?in
        ?v : T
        out.first : ^Node.Some : v in.first
        !out
    }

    *Map {
        ?in
        ?F : {
            ?i : ?T
            !o : ?U
        }
        out : List:U 
        curOut : ^^out.first  ' Assign a mutator, making out.first reference field mutable.
        curIn : in.first  ' Up to the compiler to treat this as a reference or not. We just read from in, so logic is the same.
        { curIn : Node.Some  ' As long as in is a 'Node' (not 'None')...
            curOut^ : ^Some:F:in.v  ' ... make a new 'Node' that replaces 'None' (mutate)...
            curOut : ^^curOut.next  ' ... redefine curOut to reference next, making it mutable.
            curIn : curIn.next
        }
        !out
    }

    ' mutating functions with copying of whole data at beginning that could be optimized out if original value is not needed anymore

    *Append {
        ?in  ' Compiler copies input if still needed.
        ?v : T
        cur : ^^in.first  ' Assign reference mutator.
        { cur : Some  ' As long as cur matches Some...
            cur : ^^cur.next  ' redefine it with the next element...
        }  ' until it is None.
        cur : ^Some:v
        !in
    }
)
